;The main target of this dune file is the faugere library. 
;To build the library the following needs to happen. The exact order of steps isn't so important.
; 1)Find the right fgb c libraries depending on the user's os, and copy these files to the build directory.
;   That's the final rule stanza in this file.
; 2)Generate the stub{.c/.ml} files, which give the interface to the c libraries.
;   This is done by compiling and running gen.exe, which produces the appropriate files.
; 3)Copy bindings.ml to bind.ml.
;   Both gen.ml and the bindings library depend on bindings.ml. But dune won't allow this, so we simply rename bindings.ml
; 4)Build the library

; Building the library requires some special care. Normally, we would use the foreign_archives attribute, so dune can track and find
; the dependencies.
; What complicates this is normally dune will look for both a .a and .so file when a foreign_archives attribute is included,
; but no .so files are distributed with fgb. The workaround is to manage the fgb libraries manually. This isn't too bad,
; because the build tools will search in the current directory for the required libraries. However this is not the case
; when we build the byte version of the library. For whatever reason ocamlmklib can't find the libraries without the -Lsrc
; option telling it where to find the required libraries. The other thing that needs to happen in this configuration is to
; make sure we install the fgb .a files with the library, but since they are not directly associated with the library we
; must install these files manually.

(library
 (name faugere)
 (public_name faugere)
 (libraries ctypes unix)
 (synopsis "The Faugere package entry point")
 (modules :standard \ gen bindings faugere_zarith zarith_bind)
 (foreign_stubs
  (include_dirs call_FGb/headers)
  (language c)
  (names fgb_stub)
  (flags :standard -lfgb -lfgbexp -lgb -lgbexp -lminpoly -lminpolyvgf -lgmp -lm -lstdc++ -lgomp -fopenmp -w)
 )
  (c_library_flags :standard -Lsrc -lfgb -lfgbexp -lgb -lgbexp -lminpoly -lminpolyvgf -lgmp -lm -lstdc++ -lgomp)
)

(rule
  (targets libfgb.a libfgbexp.a libgb.a libgbexp.a libminpoly.a libminpolyvgf.a)
  (action (progn
    (copy call_FGb/nv/maple/C/%{system}/libfgb.a libfgb.a)
    (copy call_FGb/nv/maple/C/%{system}/libfgbexp.a libfgbexp.a)
    (copy call_FGb/nv/maple/C/%{system}/libgb.a libgb.a)
    (copy call_FGb/nv/maple/C/%{system}/libgbexp.a libgbexp.a)
    (copy call_FGb/nv/maple/C/%{system}/libminpoly.a libminpoly.a)
    (copy call_FGb/nv/maple/C/%{system}/libminpolyvgf.a libminpolyvgf.a))
  )
)

(executable
  (name gen)
  (modules gen bindings)
  (libraries ctypes.stubs ctypes)
)

(rule
  (targets fgb_stub.c fgb_stub.ml)
  (deps gen.exe)
  (action (run ./gen.exe))
)

(rule
  (targets bind.ml)
  (deps bindings.ml)
  (action (copy bindings.ml bind.ml))
)

(install
  (section lib)
  (files libfgb.a
         libfgbexp.a
         libgb.a
         libgbexp.a
         libminpoly.a
         libminpolyvgf.a
  )
)

; If the user has zarith installed we build the optional library with zarith bindings.

(library
 (name faugere_zarith)
 (public_name faugere.zarith)
 (libraries ctypes faugere zarith)
 (foreign_stubs
   (language c)
   (names zarith_bind_stubs)
   (flags :standard -lgmp)
 )
 (modules faugere_zarith zarith_bind)
 (synopsis "Faugere with zarith bindings")
 (optional)
)
